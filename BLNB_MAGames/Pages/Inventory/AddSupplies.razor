@page "/AddSupply"
@inject NavigationManager _navigationManager

<h3 class="text-light">Ajouter un article de type "Supplies"</h3>

<EditForm Model="@supplyModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label text-light">Nom de l'article</label>
        <InputText class="form-control" @bind-Value="supplyModel.Name" />
    </div>

    <div class="mb-3">
        <label class="form-label text-light">Prix d'achat</label>
        <InputNumber class="form-control" @bind-Value="supplyModel.BuyPrice" />
    </div>

    <button type="submit" class="btn btn-primary">Ajouter</button>
</EditForm>

@code {
    private SupplyFormModel supplyModel = new();

    private async Task HandleValidSubmit()
    {
        var newBaseObj = new Base_Obj
            {
                Name = supplyModel.Name,
                SaleTypeId = await GetSaleTypeId("Supplies"),
                MarqueId = await GetMarqueId("Autre"),
                // Type = "Autre", si applicable
                ObjImages = new List<ObjImage>() // vide
            };

        // Sauver BaseObj
        _context.Base_Obj.Add(newBaseObj);
        await _context.SaveChangesAsync();

        var newStock = new Stock
            {
                BaseObjId = newBaseObj.Id,
                BuyPrice = supplyModel.BuyPrice,
                KeepPrice = 0,
                SalePrice = 0,
                EstimatedSalePrice = 0,
                ConditionId = await GetConditionId("Neuf"), // ou Autre?
                StatusId = await GetStatusId("Conservé"), // ou un statut par défaut
                AddedDate = DateTime.Now
            };

        _context.Stocks.Add(newStock);
        await _context.SaveChangesAsync();

        _navigationManager.NavigateTo("/AllInventory");
    }

    // Exemple de helpers pour récupérer les ID (à adapter)
    private async Task<int> GetSaleTypeId(string name) =>
        (await _context.SaleType.FirstOrDefaultAsync(x => x.Name == name))?.Id ?? throw new Exception("SaleType introuvable");

    private async Task<int> GetMarqueId(string name) =>
        (await _context.Marques.FirstOrDefaultAsync(x => x.Name == name))?.Id ?? throw new Exception("Marque introuvable");

    private async Task<int> GetConditionId(string name) =>
        (await _context.Condition.FirstOrDefaultAsync(x => x.Name == name))?.Id ?? throw new Exception("Condition introuvable");

    private async Task<int> GetStatusId(string name) =>
        (await _context.Status.FirstOrDefaultAsync(x => x.Name == name))?.Id ?? throw new Exception("Status introuvable");

    public class SupplyFormModel
    {
        [Required]
        public string Name { get; set; }

        [Required]
        [Range(0.01, double.MaxValue, ErrorMessage = "Le prix doit être positif.")]
        public decimal BuyPrice { get; set; }
    }
}
